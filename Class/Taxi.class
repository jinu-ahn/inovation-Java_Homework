package org.example;

public class Taxi extends transport {
    public int fee = 3000;
    public int base_fee = 1000;
    public int sum_fee =0;
    public int max_people = 4;
    public int address_by_km;
    public String address;
    public String status = "일반";


    // 운행중인 택시가 없을 때 / 선택한 택시가 생성되지 않았을 때
    protected boolean Non_Taxi() {
        System.out.print("택시 리스트 : ");
        taxi_Map.forEach((key, value) -> {
            System.out.println(key + " : " + value + " ");
        });

        if (getKey(taxi_Map, "운행중") == null) {
            System.out.println("운행중인 택시가 없습니다.");
            return false;
        }

        System.out.print("\n택시 번호를 입력하세요 : ");
        super.change_number = sc.nextInt();
        if (getKey(taxi_Map, "운행중") != change_number) {
            // 선택한 택시가 없을 때
            if (taxi_Map.containsKey(change_number) == false)
                System.out.println(change_number + "택시는 현재 운영되지 않습니다.");
            return false;
        } else
            return true;
    }
    // 잔여 승객 수
    public int residual_people() {
        return max_people - this.people;
    }
    // 승객 탑승
    public void Ride_people() {
        System.out.print("\n택시 번호를 입력하세요 : ");
        change_number = sc.nextInt();
        String get_start_taxi = (String) taxi_Map.get(change_number);

        if (taxi_Map.containsKey(change_number) == true) {
        // 선택한 버스가 운행중 일 때
            if (get_start_taxi == "일반") {
                System.out.print("탑승 시킬 승객 수 : ");
                int people = sc.nextInt();
                System.out.print("목적지 : ");
                String address = sc.next();
                System.out.print("목적지까지 거리 : " );
                int address_by_km = sc.nextInt();
                this.address = address;
                this.address_by_km = address_by_km;
                super.people += people;
                // 탑승인원 초과
                if (people > this.max_people) {
                    super.people -= people;
                    System.out.println("탑승 인원이 초과되었습니다.");
                    taxi_Map.replace(change_number, "일반");
                }
                else {
                    taxi_Map.replace(change_number, "운행중");
                    System.out.println("운행 시작합니다.");
                    System.out.println("목적지 : " + address);
                    System.out.println("목저지까지의 거리 : " + address_by_km);
                }
                // 최대 탑승 인원 일 때
                if (people == this.max_people)
                    System.out.println("총 탑승인원이 " + people + "명으로 최대탑승 인원이 되었습니다.");
                else
                    System.out.println("총 탑승 인원  : " + people);
                // 기름이 없을 때
            } else if (get_start_taxi == "운행불가"){
                System.out.println(change_number + "택시는 기름이 없어 운행이 불가합니다.");
            }
            else { // 선택한 택시가 운행중일때
                System.out.println(change_number + "택시는 현재 운행중 입니다.");
            }
        }
        else if(super.oil < 10) {
            System.out.println("기름이 10보다 낮아 운행할 수 없습니다.");
        }
        else // 선택한 택시가 생성되지 않았을 때
            System.out.println(change_number + "번 택시는 운행하지 않습니다.");
    }
    // 택시 요금
    public int taxi_fee() {
        int taxi_fee = this.fee;
        for(int i=1; i<address_by_km; i++) {
            taxi_fee += base_fee;
        }
        return taxi_fee;

    }
    // 택시 요금 합계
    public int sum_fee() {
        System.out.println("운행을 종료합니다.");
        System.out.println("주유량 : " + super.oil);
        taxi_Map.replace(change_number,"일반");
        people = 0;
        speed = 10;
        return this.sum_fee += taxi_fee();
    }
    // 주유량이 0일 때
    public void loss_oil() {
        System.out.println("주유량 : " + super.oil);
        people = 0;
        speed = 10;
        System.out.println("총 요금 : " + (this.sum_fee + taxi_fee()));
    }
    // 속도 변경
    public int Change_Speed(int speed) {
        if(super.oil < 10){
            System.out.println("주유량을 확인해 주세요. 기름이 10 이상이어야 운행 할 수 있습니다.");
            System.out.println(change_number + "버스가 일반으로 상태가 변경되었습니다.");
            taxi_Map.replace(change_number,"일반");
            people = 0;
            super.speed = 10;
            return super.oil;
        }
        // 만약 속도를 0이하로 떨어뜨렸을 시 속도를 0으로 리턴
        if(super.speed < 0){
            System.out.println("현재 속도는 0 입니다.");
            return 0;
        }
        // 만약 속도를 0이하로 떨어뜨렸을 시 속도를 0으로 리턴
        else
            return Speed(speed);
    }
    // 기름 변경
    public int Change_Oil(int oil) {
        int change_oil = this.oil + oil;

        if (change_oil == 0) {
            System.out.println("기름이 없어 운행을 종료합니다.");
            taxi_Map.replace(change_number, "운행불가");
            String get_start_taxi = (String) taxi_Map.get(change_number);
            System.out.println("상태 : " + get_start_taxi);
            this.people = 0;
            this.speed = 10;
            this.oil = 0;
            loss_oil();
            return this.oil;
        }
        else
            return Oil(oil);

    }
}
